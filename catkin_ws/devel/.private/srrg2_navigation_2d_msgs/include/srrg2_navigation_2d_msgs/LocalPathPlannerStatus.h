// Generated by gencpp from file srrg2_navigation_2d_msgs/LocalPathPlannerStatus.msg
// DO NOT EDIT!


#ifndef SRRG2_NAVIGATION_2D_MSGS_MESSAGE_LOCALPATHPLANNERSTATUS_H
#define SRRG2_NAVIGATION_2D_MSGS_MESSAGE_LOCALPATHPLANNERSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Twist.h>

namespace srrg2_navigation_2d_msgs
{
template <class ContainerAllocator>
struct LocalPathPlannerStatus_
{
  typedef LocalPathPlannerStatus_<ContainerAllocator> Type;

  LocalPathPlannerStatus_()
    : header()
    , num_steps_to_goal(0)
    , robot_pose_2d()
    , local_target_2d()
    , cmd_vel()
    , status()  {
      robot_pose_2d.assign(0.0);

      local_target_2d.assign(0.0);
  }
  LocalPathPlannerStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , num_steps_to_goal(0)
    , robot_pose_2d()
    , local_target_2d()
    , cmd_vel(_alloc)
    , status(_alloc)  {
  (void)_alloc;
      robot_pose_2d.assign(0.0);

      local_target_2d.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _num_steps_to_goal_type;
  _num_steps_to_goal_type num_steps_to_goal;

   typedef boost::array<float, 3>  _robot_pose_2d_type;
  _robot_pose_2d_type robot_pose_2d;

   typedef boost::array<float, 3>  _local_target_2d_type;
  _local_target_2d_type local_target_2d;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _cmd_vel_type;
  _cmd_vel_type cmd_vel;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator> const> ConstPtr;

}; // struct LocalPathPlannerStatus_

typedef ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<std::allocator<void> > LocalPathPlannerStatus;

typedef boost::shared_ptr< ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus > LocalPathPlannerStatusPtr;
typedef boost::shared_ptr< ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus const> LocalPathPlannerStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator1> & lhs, const ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.num_steps_to_goal == rhs.num_steps_to_goal &&
    lhs.robot_pose_2d == rhs.robot_pose_2d &&
    lhs.local_target_2d == rhs.local_target_2d &&
    lhs.cmd_vel == rhs.cmd_vel &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator1> & lhs, const ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace srrg2_navigation_2d_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea28f7c3c138ef8732745d1ce16b8aaf";
  }

  static const char* value(const ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea28f7c3c138ef87ULL;
  static const uint64_t static_value2 = 0x32745d1ce16b8aafULL;
};

template<class ContainerAllocator>
struct DataType< ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srrg2_navigation_2d_msgs/LocalPathPlannerStatus";
  }

  static const char* value(const ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"#how many steps we need to reach the goal\n"
"int64 num_steps_to_goal \n"
"\n"
"#2D robot pose (x,y, theta)\n"
"float32[3] robot_pose_2d\n"
"\n"
"#2D target of the robot in the local frame\n"
"float32[3] local_target_2d\n"
"\n"
"#command output by the follower\n"
"geometry_msgs/Twist cmd_vel\n"
"\n"
"# status can be either\n"
"# \"goal_reached\":    when the path is empty\n"
"# \"initial_turning\": when the robot initially rotates to align with the path\n"
"# \"cruising\":        when the robot is tracking the path with the regular controller\n"
"# \"finalizing\":      when the robot reached the final position, and adjusts the orientation\n"
"string status\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.num_steps_to_goal);
      stream.next(m.robot_pose_2d);
      stream.next(m.local_target_2d);
      stream.next(m.cmd_vel);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocalPathPlannerStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srrg2_navigation_2d_msgs::LocalPathPlannerStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "num_steps_to_goal: ";
    Printer<int64_t>::stream(s, indent + "  ", v.num_steps_to_goal);
    s << indent << "robot_pose_2d[]" << std::endl;
    for (size_t i = 0; i < v.robot_pose_2d.size(); ++i)
    {
      s << indent << "  robot_pose_2d[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.robot_pose_2d[i]);
    }
    s << indent << "local_target_2d[]" << std::endl;
    for (size_t i = 0; i < v.local_target_2d.size(); ++i)
    {
      s << indent << "  local_target_2d[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.local_target_2d[i]);
    }
    s << indent << "cmd_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.cmd_vel);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRRG2_NAVIGATION_2D_MSGS_MESSAGE_LOCALPATHPLANNERSTATUS_H
