// Generated by gencpp from file srrg2_core_ros/PlannerStatusMessage.msg
// DO NOT EDIT!


#ifndef SRRG2_CORE_ROS_MESSAGE_PLANNERSTATUSMESSAGE_H
#define SRRG2_CORE_ROS_MESSAGE_PLANNERSTATUSMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace srrg2_core_ros
{
template <class ContainerAllocator>
struct PlannerStatusMessage_
{
  typedef PlannerStatusMessage_<ContainerAllocator> Type;

  PlannerStatusMessage_()
    : header()
    , status()
    , a_star_status(0)
    , path_type(0)
    , cost_to_global_goal(0.0)
    , distance_to_global_goal(0.0)
    , distance_to_local_goal(0.0)  {
    }
  PlannerStatusMessage_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , status(_alloc)
    , a_star_status(0)
    , path_type(0)
    , cost_to_global_goal(0.0)
    , distance_to_global_goal(0.0)
    , distance_to_local_goal(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;

   typedef int32_t _a_star_status_type;
  _a_star_status_type a_star_status;

   typedef int32_t _path_type_type;
  _path_type_type path_type;

   typedef float _cost_to_global_goal_type;
  _cost_to_global_goal_type cost_to_global_goal;

   typedef float _distance_to_global_goal_type;
  _distance_to_global_goal_type distance_to_global_goal;

   typedef float _distance_to_local_goal_type;
  _distance_to_local_goal_type distance_to_local_goal;





  typedef boost::shared_ptr< ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator> const> ConstPtr;

}; // struct PlannerStatusMessage_

typedef ::srrg2_core_ros::PlannerStatusMessage_<std::allocator<void> > PlannerStatusMessage;

typedef boost::shared_ptr< ::srrg2_core_ros::PlannerStatusMessage > PlannerStatusMessagePtr;
typedef boost::shared_ptr< ::srrg2_core_ros::PlannerStatusMessage const> PlannerStatusMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator1> & lhs, const ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.status == rhs.status &&
    lhs.a_star_status == rhs.a_star_status &&
    lhs.path_type == rhs.path_type &&
    lhs.cost_to_global_goal == rhs.cost_to_global_goal &&
    lhs.distance_to_global_goal == rhs.distance_to_global_goal &&
    lhs.distance_to_local_goal == rhs.distance_to_local_goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator1> & lhs, const ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace srrg2_core_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cde3a14282df6b919fe6c0fcba349400";
  }

  static const char* value(const ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcde3a14282df6b91ULL;
  static const uint64_t static_value2 = 0x9fe6c0fcba349400ULL;
};

template<class ContainerAllocator>
struct DataType< ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srrg2_core_ros/PlannerStatusMessage";
  }

  static const char* value(const ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#gg mesage for the planner status, shot continuosly by the planner\n"
"\n"
"Header   header\n"
"string   status           #status of the planner (\"idle\", \"moving\", \"invalid_goal\", \"unreachable\")\n"
"int32    a_star_status    #result of the enum for the local path search\n"
"int32    path_type        #type of path 0: gradient, 1: grid\n"
"float32  cost_to_global_goal     #value of the cost function at the current location\n"
"float32  distance_to_global_goal #distance to the current location [meters]\n"
"float32  distance_to_local_goal #distance to the current location [meters]\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.status);
      stream.next(m.a_star_status);
      stream.next(m.path_type);
      stream.next(m.cost_to_global_goal);
      stream.next(m.distance_to_global_goal);
      stream.next(m.distance_to_local_goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlannerStatusMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srrg2_core_ros::PlannerStatusMessage_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "a_star_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.a_star_status);
    s << indent << "path_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.path_type);
    s << indent << "cost_to_global_goal: ";
    Printer<float>::stream(s, indent + "  ", v.cost_to_global_goal);
    s << indent << "distance_to_global_goal: ";
    Printer<float>::stream(s, indent + "  ", v.distance_to_global_goal);
    s << indent << "distance_to_local_goal: ";
    Printer<float>::stream(s, indent + "  ", v.distance_to_local_goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRRG2_CORE_ROS_MESSAGE_PLANNERSTATUSMESSAGE_H
