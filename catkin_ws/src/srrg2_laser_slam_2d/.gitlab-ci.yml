#///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ds pipeline stages
stages:
  - build #ds confirm compilation and linking
  - test #ds confirm module-wise functionality
  - benchmark #ds confirm state-of-the-art SLAM performance

#///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ds script executed before starting each stage
before_script:
  #ds prepare generic environment for SRRG2 builds and tests
  #ds currently retrieved from cmake_modules repository (which is public)
  #ds this script is intended for SRRG2 images only (no apt update/upgrade will be performed)
  - mkdir -p '/root/workspace/src' && cd '/root/workspace/src/'
  - git clone 'https://gitlab.com/srrg-software/srrg_cmake_modules.git'
  - export SRRG_SCRIPT_PATH='/root/workspace/src/srrg_cmake_modules/ci_scripts'
  - ls -al "$SRRG_SCRIPT_PATH"
  - source ${SRRG_SCRIPT_PATH}/install_catkin_workspace.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME"

  #ds test datasets path TODO script
  - export URL_DATASET_LASER_2D_KILLIAN="https://drive.google.com/uc?export=download&id=1Rq_tA7ZjhBASrtHsFfHBuJmBvDs2_2xK"
  - export URL_DATASET_LASER_2D_INTEL="https://drive.google.com/uc?export=download&id=1upKPzQVnu4RxaTIYKw6YAA6WzW7GHVcG"
  - export WS="/root/workspace/"
  - export DATASET_PATH="/datasets/"

#///////////////////////////////////////////////////////////////////////////////////////////////////////////
build_ubuntu1804_melodic_debug:
  image: srrg-07:5000/srrg-ubuntu-18
  stage: build
  script:
    - cd ${WS}/src/
    - git clone git@gitlab.com:srrg-software/srrg_hbst.git

    #ds clones external package and installs artifacts for it - note that currently it is required to do this in reverse order of dependency (updating overwrite)
    - source ${SRRG_SCRIPT_PATH}/unpack_all_external_artifacts.sh "$CI_PROJECT_NAME" "$CI_BUILD_REF_NAME" "$CI_JOB_NAME"

    - source ${SRRG_SCRIPT_PATH}/build.sh "${WS}" "$CI_PROJECT_NAME" "DEBUG"
    - source ${SRRG_SCRIPT_PATH}/pack_artifacts.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME"
  artifacts:
    paths:
      - artifacts/build.tar.gz
      - artifacts/devel.tar.gz

build_ubuntu1804_melodic_release:
  image: srrg-07:5000/srrg-ubuntu-18
  stage: build
  script:
    - cd ${WS}/src/
    - git clone git@gitlab.com:srrg-software/srrg_hbst.git

    #ds clones external package and installs artifacts for it - note that currently it is required to do this in reverse order of dependency (updating overwrite)
    - source ${SRRG_SCRIPT_PATH}/unpack_all_external_artifacts.sh "$CI_PROJECT_NAME" "$CI_BUILD_REF_NAME" "$CI_JOB_NAME"

    - source ${SRRG_SCRIPT_PATH}/build.sh "${WS}" "$CI_PROJECT_NAME" "RELEASE"
    - source ${SRRG_SCRIPT_PATH}/pack_artifacts.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME"
  artifacts:
    paths:
      - artifacts/build.tar.gz
      - artifacts/devel.tar.gz

build_ubuntu2004_noetic_debug:
  image: srrg-07:5000/srrg-ubuntu-20 #gherobba
  stage: build
  script:
    - cd ${WS}/src/
    - git clone git@gitlab.com:srrg-software/srrg_hbst.git

    #ds clones external package and installs artifacts for it - note that currently it is required to do this in reverse order of dependency (updating overwrite)
    - source ${SRRG_SCRIPT_PATH}/unpack_all_external_artifacts.sh "$CI_PROJECT_NAME" "$CI_BUILD_REF_NAME" "$CI_JOB_NAME"
    - source ${SRRG_SCRIPT_PATH}/build.sh "${WS}" "$CI_PROJECT_NAME" "DEBUG"
    - source ${SRRG_SCRIPT_PATH}/pack_artifacts.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME"
  artifacts:
    paths:
      - artifacts/build.tar.gz
      - artifacts/devel.tar.gz

build_ubuntu2004_noetic_release:
  image: srrg-07:5000/srrg-ubuntu-20 #gherobba
  stage: build
  script:
    - cd ${WS}/src/
    - git clone git@gitlab.com:srrg-software/srrg_hbst.git

    #ds clones external package and installs artifacts for it - note that currently it is required to do this in reverse order of dependency (updating overwrite)
    - source ${SRRG_SCRIPT_PATH}/unpack_all_external_artifacts.sh "$CI_PROJECT_NAME" "$CI_BUILD_REF_NAME" "$CI_JOB_NAME"
    - source ${SRRG_SCRIPT_PATH}/build.sh "${WS}" "$CI_PROJECT_NAME" "RELEASE"
    - source ${SRRG_SCRIPT_PATH}/pack_artifacts.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME"
  artifacts:
    paths:
      - artifacts/build.tar.gz
      - artifacts/devel.tar.gz
#///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ds test targets (NO BUILDING WHATSOEVER!)

test_ubuntu1804_melodic_debug:
  image: srrg-07:5000/srrg-ubuntu-18
  stage: test
  needs:
    - build_ubuntu1804_melodic_debug
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu1804_melodic_debug'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/download_and_extract_file.sh "$URL_DATASET_LASER_2D_KILLIAN" "${WS}" "mit_killian_court.tar.gz"
    - source ${SRRG_SCRIPT_PATH}/download_and_extract_file.sh "$URL_DATASET_LASER_2D_INTEL" "${WS}" "intel_research_lab.tar.gz"
    - source ${SRRG_SCRIPT_PATH}/run_unittests.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME"

test_ubuntu1804_melodic_release:
  image: registry.gitlab.com/srrg-internals/dockers/srrg-ubuntu-18
  stage: test
  needs:
    - build_ubuntu1804_melodic_release
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu1804_melodic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/download_and_extract_file.sh "$URL_DATASET_LASER_2D_KILLIAN" "${WS}" "mit_killian_court.tar.gz"
    - source ${SRRG_SCRIPT_PATH}/download_and_extract_file.sh "$URL_DATASET_LASER_2D_INTEL" "${WS}" "intel_research_lab.tar.gz"
    - source ${SRRG_SCRIPT_PATH}/run_unittests.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME"

test_ubuntu2004_noetic_debug:
  image: srrg-07:5000/srrg-ubuntu-20
  stage: test
  needs:
    - build_ubuntu2004_noetic_debug
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu2004_noetic_debug'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/download_and_extract_file.sh "$URL_DATASET_LASER_2D_KILLIAN" "${WS}" "mit_killian_court.tar.gz"
    - source ${SRRG_SCRIPT_PATH}/download_and_extract_file.sh "$URL_DATASET_LASER_2D_INTEL" "${WS}" "intel_research_lab.tar.gz"
    - source ${SRRG_SCRIPT_PATH}/run_unittests.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME"

test_ubuntu2004_noetic_release:
  image: srrg-07:5000/srrg-ubuntu-20
  stage: test
  needs:
    - build_ubuntu2004_noetic_release
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu2004_noetic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/download_and_extract_file.sh "$URL_DATASET_LASER_2D_KILLIAN" "${WS}" "mit_killian_court.tar.gz"
    - source ${SRRG_SCRIPT_PATH}/download_and_extract_file.sh "$URL_DATASET_LASER_2D_INTEL" "${WS}" "intel_research_lab.tar.gz"
    - source ${SRRG_SCRIPT_PATH}/run_unittests.sh "$CI_PROJECT_DIR" "$CI_PROJECT_NAME"

#///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ds performance (regression) analysis (NO BUILDING OR TESTING WHATSOEVER!)
benchmark_ubuntu1804_melodic_release_single_0:
  image: srrg-07:5000/srrg-ubuntu-18
  stage: benchmark
  needs:
    - build_ubuntu1804_melodic_release
    - test_ubuntu1804_melodic_release
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu1804_melodic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/benchmark/find_dl.sh #TODO create dl.conf inside the package and remove this
    - export DATASET="segway_single_0.bag"
    - export CONFIG="stage_segway_single.conf"
    - export GT_TOPIC="/diago_0/base_pose_ground_truth"
    - export DL_SOURCE="${DLC}" #DLC declaretion in find_dl.sh
    - export PLOT_MODE="xy"
    - source ${SRRG_SCRIPT_PATH}/benchmark/run_benchmark_app.sh ${DATASET} ${CONFIG} ${GT_TOPIC} ${DL_SOURCE} ${PLOT_MODE}
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.1 ${RESULTS_APE}  #RESULTS_APE declaretion in run_benchmark_app.sh
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.01 ${RESULTS_RPE} #RESULTS_RPE declaretion in run_benchmark_app.sh

benchmark_ubuntu1804_melodic_release_double_0_MULTI:
  image: srrg-07:5000/srrg-ubuntu-18
  stage: benchmark
  needs:
    - build_ubuntu1804_melodic_release
    - test_ubuntu1804_melodic_release
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu1804_melodic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/benchmark/find_dl.sh #TODO create dl.conf inside the package and remove this
    - export DATASET="segway_double_0.bag"
    - export CONFIG="stage_segway_double_config_MULTI.json"
    - export GT_TOPIC="/diago_0/base_pose_ground_truth"
    - export DL_SOURCE="${DLC}" #DLC declaretion in find_dl.sh
    - export PLOT_MODE="xy"
    - source ${SRRG_SCRIPT_PATH}/benchmark/run_benchmark_app.sh ${DATASET} ${CONFIG} ${GT_TOPIC} ${DL_SOURCE} ${PLOT_MODE}
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.1 ${RESULTS_APE}  #RESULTS_APE declaretion in run_benchmark_app.sh
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.01 ${RESULTS_RPE} #RESULTS_RPE declaretion in run_benchmark_app.sh

benchmark_ubuntu1804_melodic_release_double_1_MULTI:
  image: srrg-07:5000/srrg-ubuntu-18
  stage: benchmark
  needs:
    - build_ubuntu1804_melodic_release
    - test_ubuntu1804_melodic_release
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu1804_melodic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/benchmark/find_dl.sh #TODO create dl.conf inside the package and remove this
    - export DATASET="segway_double_1.bag"
    - export CONFIG="stage_segway_double_config_MULTI.json"
    - export GT_TOPIC="/diago_0/base_pose_ground_truth"
    - export DL_SOURCE="${DLC}" #DLC declaretion in find_dl.sh
    - export PLOT_MODE="xy"
    - source ${SRRG_SCRIPT_PATH}/benchmark/run_benchmark_app.sh ${DATASET} ${CONFIG} ${GT_TOPIC} ${DL_SOURCE} ${PLOT_MODE}
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.1 ${RESULTS_APE}  #RESULTS_APE declaretion in run_benchmark_app.sh
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.01 ${RESULTS_RPE} #RESULTS_RPE declaretion in run_benchmark_app.sh

benchmark_ubuntu1804_melodic_release_double_2_MULTI:
  image: srrg-07:5000/srrg-ubuntu-18
  stage: benchmark
  needs:
    - build_ubuntu1804_melodic_release
    - test_ubuntu1804_melodic_release
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu1804_melodic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/benchmark/find_dl.sh #TODO create dl.conf inside the package and remove this
    - export DATASET="segway_double_2.bag"
    - export CONFIG="stage_segway_double_config_MULTI.json"
    - export GT_TOPIC="/diago_0/base_pose_ground_truth"
    - export DL_SOURCE="${DLC}" #DLC declaretion in find_dl.sh
    - export PLOT_MODE="xy"
    - source ${SRRG_SCRIPT_PATH}/benchmark/run_benchmark_app.sh ${DATASET} ${CONFIG} ${GT_TOPIC} ${DL_SOURCE} ${PLOT_MODE}
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.1 ${RESULTS_APE}  #RESULTS_APE declaretion in run_benchmark_app.sh
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.01 ${RESULTS_RPE} #RESULTS_RPE declaretion in run_benchmark_app.sh

benchmark_ubuntu1804_melodic_release_double_3_MULTI:
  image: srrg-07:5000/srrg-ubuntu-18
  stage: benchmark
  needs:
    - build_ubuntu1804_melodic_release
    - test_ubuntu1804_melodic_release
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu1804_melodic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/benchmark/find_dl.sh #TODO create dl.conf inside the package and remove this
    - export DATASET="segway_double_3.bag"
    - export CONFIG="stage_segway_double_config_MULTI.json"
    - export GT_TOPIC="/diago_0/base_pose_ground_truth"
    - export DL_SOURCE="${DLC}" #DLC declaretion in find_dl.sh
    - export PLOT_MODE="xy"
    - source ${SRRG_SCRIPT_PATH}/benchmark/run_benchmark_app.sh ${DATASET} ${CONFIG} ${GT_TOPIC} ${DL_SOURCE} ${PLOT_MODE}
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.1 ${RESULTS_APE}  #RESULTS_APE declaretion in run_benchmark_app.sh
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.01 ${RESULTS_RPE} #RESULTS_RPE declaretion in run_benchmark_app.sh


benchmark_ubuntu1804_melodic_release_double_0_LASER_0:
  image: srrg-07:5000/srrg-ubuntu-18
  stage: benchmark
  needs:
    - build_ubuntu1804_melodic_release
    - test_ubuntu1804_melodic_release
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu1804_melodic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/benchmark/find_dl.sh #TODO create dl.conf inside the package and remove this
    - export DATASET="segway_double_0.bag"
    - export CONFIG="stage_segway_double_config_LASER_0.json"
    - export GT_TOPIC="/diago_0/base_pose_ground_truth"
    - export DL_SOURCE="${DLC}" #DLC declaretion in find_dl.sh
    - export PLOT_MODE="xy"
    - source ${SRRG_SCRIPT_PATH}/benchmark/run_benchmark_app.sh ${DATASET} ${CONFIG} ${GT_TOPIC} ${DL_SOURCE} ${PLOT_MODE}
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.1 ${RESULTS_APE}  #RESULTS_APE declaretion in run_benchmark_app.sh
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.01 ${RESULTS_RPE} #RESULTS_RPE declaretion in run_benchmark_app.sh

benchmark_ubuntu1804_melodic_release_double_1_LASER_0:
  image: srrg-07:5000/srrg-ubuntu-18
  stage: benchmark
  needs:
    - build_ubuntu1804_melodic_release
    - test_ubuntu1804_melodic_release
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu1804_melodic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/benchmark/find_dl.sh #TODO create dl.conf inside the package and remove this
    - export DATASET="segway_double_1.bag"
    - export CONFIG="stage_segway_double_config_LASER_0.json"
    - export GT_TOPIC="/diago_0/base_pose_ground_truth"
    - export DL_SOURCE="${DLC}" #DLC declaretion in find_dl.sh
    - export PLOT_MODE="xy"
    - source ${SRRG_SCRIPT_PATH}/benchmark/run_benchmark_app.sh ${DATASET} ${CONFIG} ${GT_TOPIC} ${DL_SOURCE} ${PLOT_MODE}
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.1 ${RESULTS_APE}  #RESULTS_APE declaretion in run_benchmark_app.sh
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.01 ${RESULTS_RPE} #RESULTS_RPE declaretion in run_benchmark_app.sh

benchmark_ubuntu1804_melodic_release_double_2_LASER_0:
  image: srrg-07:5000/srrg-ubuntu-18
  stage: benchmark
  needs:
    - build_ubuntu1804_melodic_release
    - test_ubuntu1804_melodic_release
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu1804_melodic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/benchmark/find_dl.sh #TODO create dl.conf inside the package and remove this
    - export DATASET="segway_double_2.bag"
    - export CONFIG="stage_segway_double_config_LASER_0.json"
    - export GT_TOPIC="/diago_0/base_pose_ground_truth"
    - export DL_SOURCE="${DLC}" #DLC declaretion in find_dl.sh
    - export PLOT_MODE="xy"
    - source ${SRRG_SCRIPT_PATH}/benchmark/run_benchmark_app.sh ${DATASET} ${CONFIG} ${GT_TOPIC} ${DL_SOURCE} ${PLOT_MODE}
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.1 ${RESULTS_APE}  #RESULTS_APE declaretion in run_benchmark_app.sh
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.01 ${RESULTS_RPE} #RESULTS_RPE declaretion in run_benchmark_app.sh

benchmark_ubuntu1804_melodic_release_double_3_LASER_0:
  image: srrg-07:5000/srrg-ubuntu-18
  stage: benchmark
  needs:
    - build_ubuntu1804_melodic_release
    - test_ubuntu1804_melodic_release
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu1804_melodic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/benchmark/find_dl.sh #TODO create dl.conf inside the package and remove this
    - export DATASET="segway_double_3.bag"
    - export CONFIG="stage_segway_double_config_LASER_0.json"
    - export GT_TOPIC="/diago_0/base_pose_ground_truth"
    - export DL_SOURCE="${DLC}" #DLC declaretion in find_dl.sh
    - export PLOT_MODE="xy"
    - source ${SRRG_SCRIPT_PATH}/benchmark/run_benchmark_app.sh ${DATASET} ${CONFIG} ${GT_TOPIC} ${DL_SOURCE} ${PLOT_MODE}
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.1 ${RESULTS_APE}  #RESULTS_APE declaretion in run_benchmark_app.sh
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.01 ${RESULTS_RPE} #RESULTS_RPE declaretion in run_benchmark_app.sh

benchmark_ubuntu2004_noetic_release_single_0:
  image: srrg-07:5000/srrg-ubuntu-20
  stage: benchmark
  needs:
    - build_ubuntu2004_noetic_release
    - test_ubuntu2004_noetic_release
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu2004_noetic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/benchmark/find_dl.sh #TODO create dl.conf inside the package and remove this
    - export DATASET="segway_single_0.bag"
    - export CONFIG="stage_segway_single.conf"
    - export GT_TOPIC="/diago_0/base_pose_ground_truth"
    - export DL_SOURCE="${DLC}" #DLC declaretion in find_dl.sh
    - export PLOT_MODE="xy"
    - source ${SRRG_SCRIPT_PATH}/benchmark/run_benchmark_app.sh ${DATASET} ${CONFIG} ${GT_TOPIC} ${DL_SOURCE} ${PLOT_MODE}
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.1 ${RESULTS_APE}  #RESULTS_APE declaretion in run_benchmark_app.sh
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.01 ${RESULTS_RPE} #RESULTS_RPE declaretion in run_benchmark_app.sh

benchmark_ubuntu2004_noetic_release_double_0_MULTI:
  image: srrg-07:5000/srrg-ubuntu-20
  stage: benchmark
  needs:
    - build_ubuntu2004_noetic_release
    - test_ubuntu2004_noetic_release
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu2004_noetic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/benchmark/find_dl.sh #TODO create dl.conf inside the package and remove this
    - export DATASET="segway_double_0.bag"
    - export CONFIG="stage_segway_double_config_MULTI.json"
    - export GT_TOPIC="/diago_0/base_pose_ground_truth"
    - export DL_SOURCE="${DLC}" #DLC declaretion in find_dl.sh
    - export PLOT_MODE="xy"
    - source ${SRRG_SCRIPT_PATH}/benchmark/run_benchmark_app.sh ${DATASET} ${CONFIG} ${GT_TOPIC} ${DL_SOURCE} ${PLOT_MODE}
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.1 ${RESULTS_APE}  #RESULTS_APE declaretion in run_benchmark_app.sh
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.01 ${RESULTS_RPE} #RESULTS_RPE declaretion in run_benchmark_app.sh

benchmark_ubuntu2004_noetic_release_double_1_MULTI:
  image: srrg-07:5000/srrg-ubuntu-20
  stage: benchmark
  needs:
    - build_ubuntu2004_noetic_release
    - test_ubuntu2004_noetic_release
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu2004_noetic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/benchmark/find_dl.sh #TODO create dl.conf inside the package and remove this
    - export DATASET="segway_double_1.bag"
    - export CONFIG="stage_segway_double_config_MULTI.json"
    - export GT_TOPIC="/diago_0/base_pose_ground_truth"
    - export DL_SOURCE="${DLC}" #DLC declaretion in find_dl.sh
    - export PLOT_MODE="xy"
    - source ${SRRG_SCRIPT_PATH}/benchmark/run_benchmark_app.sh ${DATASET} ${CONFIG} ${GT_TOPIC} ${DL_SOURCE} ${PLOT_MODE}
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.1 ${RESULTS_APE}  #RESULTS_APE declaretion in run_benchmark_app.sh
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.01 ${RESULTS_RPE} #RESULTS_RPE declaretion in run_benchmark_app.sh

benchmark_ubuntu2004_noetic_release_double_2_MULTI:
  image: srrg-07:5000/srrg-ubuntu-20
  stage: benchmark
  needs:
    - build_ubuntu2004_noetic_release
    - test_ubuntu2004_noetic_release
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu2004_noetic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/benchmark/find_dl.sh #TODO create dl.conf inside the package and remove this
    - export DATASET="segway_double_2.bag"
    - export CONFIG="stage_segway_double_config_MULTI.json"
    - export GT_TOPIC="/diago_0/base_pose_ground_truth"
    - export DL_SOURCE="${DLC}" #DLC declaretion in find_dl.sh
    - export PLOT_MODE="xy"
    - source ${SRRG_SCRIPT_PATH}/benchmark/run_benchmark_app.sh ${DATASET} ${CONFIG} ${GT_TOPIC} ${DL_SOURCE} ${PLOT_MODE}
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.1 ${RESULTS_APE}  #RESULTS_APE declaretion in run_benchmark_app.sh
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.01 ${RESULTS_RPE} #RESULTS_RPE declaretion in run_benchmark_app.sh

benchmark_ubuntu2004_noetic_release_double_3_MULTI:
  image: srrg-07:5000/srrg-ubuntu-20
  stage: benchmark
  needs:
    - build_ubuntu2004_noetic_release
    - test_ubuntu2004_noetic_release
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu2004_noetic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/benchmark/find_dl.sh #TODO create dl.conf inside the package and remove this
    - export DATASET="segway_double_3.bag"
    - export CONFIG="stage_segway_double_config_MULTI.json"
    - export GT_TOPIC="/diago_0/base_pose_ground_truth"
    - export DL_SOURCE="${DLC}" #DLC declaretion in find_dl.sh
    - export PLOT_MODE="xy"
    - source ${SRRG_SCRIPT_PATH}/benchmark/run_benchmark_app.sh ${DATASET} ${CONFIG} ${GT_TOPIC} ${DL_SOURCE} ${PLOT_MODE}
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.1 ${RESULTS_APE}  #RESULTS_APE declaretion in run_benchmark_app.sh
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.01 ${RESULTS_RPE} #RESULTS_RPE declaretion in run_benchmark_app.sh


benchmark_ubuntu2004_noetic_release_double_0_LASER_0:
  image: srrg-07:5000/srrg-ubuntu-20
  stage: benchmark
  needs:
    - build_ubuntu2004_noetic_release
    - test_ubuntu2004_noetic_release
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu2004_noetic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/benchmark/find_dl.sh #TODO create dl.conf inside the package and remove this
    - export DATASET="segway_double_0.bag"
    - export CONFIG="stage_segway_double_config_LASER_0.json"
    - export GT_TOPIC="/diago_0/base_pose_ground_truth"
    - export DL_SOURCE="${DLC}" #DLC declaretion in find_dl.sh
    - export PLOT_MODE="xy"
    - source ${SRRG_SCRIPT_PATH}/benchmark/run_benchmark_app.sh ${DATASET} ${CONFIG} ${GT_TOPIC} ${DL_SOURCE} ${PLOT_MODE}
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.1 ${RESULTS_APE}  #RESULTS_APE declaretion in run_benchmark_app.sh
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.01 ${RESULTS_RPE} #RESULTS_RPE declaretion in run_benchmark_app.sh

benchmark_ubuntu2004_noetic_release_double_1_LASER_0:
  image: srrg-07:5000/srrg-ubuntu-20
  stage: benchmark
  needs:
    - build_ubuntu2004_noetic_release
    - test_ubuntu2004_noetic_release
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu2004_noetic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/benchmark/find_dl.sh #TODO create dl.conf inside the package and remove this
    - export DATASET="segway_double_1.bag"
    - export CONFIG="stage_segway_double_config_LASER_0.json"
    - export GT_TOPIC="/diago_0/base_pose_ground_truth"
    - export DL_SOURCE="${DLC}" #DLC declaretion in find_dl.sh
    - export PLOT_MODE="xy"
    - source ${SRRG_SCRIPT_PATH}/benchmark/run_benchmark_app.sh ${DATASET} ${CONFIG} ${GT_TOPIC} ${DL_SOURCE} ${PLOT_MODE}
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.1 ${RESULTS_APE}  #RESULTS_APE declaretion in run_benchmark_app.sh
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.01 ${RESULTS_RPE} #RESULTS_RPE declaretion in run_benchmark_app.sh

benchmark_ubuntu2004_noetic_release_double_2_LASER_0:
  image: srrg-07:5000/srrg-ubuntu-20
  stage: benchmark
  needs:
    - build_ubuntu2004_noetic_release
    - test_ubuntu2004_noetic_release
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu2004_noetic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/benchmark/find_dl.sh #TODO create dl.conf inside the package and remove this
    - export DATASET="segway_double_2.bag"
    - export CONFIG="stage_segway_double_config_LASER_0.json"
    - export GT_TOPIC="/diago_0/base_pose_ground_truth"
    - export DL_SOURCE="${DLC}" #DLC declaretion in find_dl.sh
    - export PLOT_MODE="xy"
    - source ${SRRG_SCRIPT_PATH}/benchmark/run_benchmark_app.sh ${DATASET} ${CONFIG} ${GT_TOPIC} ${DL_SOURCE} ${PLOT_MODE}
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.1 ${RESULTS_APE}  #RESULTS_APE declaretion in run_benchmark_app.sh
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.01 ${RESULTS_RPE} #RESULTS_RPE declaretion in run_benchmark_app.sh

benchmark_ubuntu2004_noetic_release_double_3_LASER_0:
  image: srrg-07:5000/srrg-ubuntu-20
  stage: benchmark
  needs:
    - build_ubuntu2004_noetic_release
    - test_ubuntu2004_noetic_release
  script:
    - cd ${WS}
    - export ARTIFACTS_JOB_NAME='build_ubuntu2004_noetic_release'
    - source ${SRRG_SCRIPT_PATH}/unpack_internal_artifacts.sh "$CI_PROJECT_DIR" "${ARTIFACTS_JOB_NAME}"
    - source ${SRRG_SCRIPT_PATH}/benchmark/find_dl.sh #TODO create dl.conf inside the package and remove this
    - export DATASET="segway_double_3.bag"
    - export CONFIG="stage_segway_double_config_LASER_0.json"
    - export GT_TOPIC="/diago_0/base_pose_ground_truth"
    - export DL_SOURCE="${DLC}" #DLC declaretion in find_dl.sh
    - export PLOT_MODE="xy"
    - source ${SRRG_SCRIPT_PATH}/benchmark/run_benchmark_app.sh ${DATASET} ${CONFIG} ${GT_TOPIC} ${DL_SOURCE} ${PLOT_MODE}
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.1 ${RESULTS_APE}  #RESULTS_APE declaretion in run_benchmark_app.sh
    - ${SRRG_SCRIPT_PATH}/benchmark/pass_bench.py --threshold 0.01 ${RESULTS_RPE} #RESULTS_RPE declaretion in run_benchmark_app.sh
