"SparseBlockLinearSolverCholeskyCSparse" { 
  "#id" : 1
 }

"IterationAlgorithmLM" { 
  "#id" : 2, 

  // max lm iterations [default: 10]
  "lm_iterations_max" : 10, 

  // upper clamp for lambda if things go well
  "step_high" : 0.666666687, 

  // lower clamp for lambda if things go well 
  "step_low" : 0.333333343, 

  // scale factor for the lambda computed by the system, do not influence the one provided by the user [default: 1e-5]
  "tau" : 9.99999975e-06, 

  // initial lm lambda, if 0 is computed by system [default: 0]
  "user_lambda_init" : 0, 

  // set to true uses lambda*diag(H), otherwise uses lambda*I [default: true]
  "variable_damping" : 1
 }

"SimpleTerminationCriteria" { 
  "#id" : 3, 

  // ratio of decay of chi2 between iteration
  "epsilon" : 0.00100000005
 }

"SimpleTerminationCriteria" { 
  "#id" : 4, 

  // ratio of decay of chi2 between iteration
  "epsilon" : 9.99999975e-05
 }

"RobustifierCauchy" { 
  "#id" : 5, 

  // threshold of chi after which the kernel is active
  "chi_threshold" : 10
 }

"SparseBlockLinearSolverCholmodFull" { 
  "#id" : 6
 }

"IterationAlgorithmDDL" { 
  "#id" : 7, 

  // initial radius of the trust region [default: 1e4]
  "initial_radius" : 10000, 

  // Increase factor of the damping in the GN step
  "lambda_factor" : 10, 

  // max iterations of the algorithm[default: 20]
  "max_iterations" : 20, 

  // Maximum value for the damping of the GN step
  "max_lambda" : 1, 

  // max value of the chi ratio to decrease the radius of the trust region
  "max_ratio_down" : 0.25, 

  // Minimum diagonal value for the H to compute the trust region scales
  "min_diag" : 9.99999997e-07, 

  // Minimum value for the damping of the GN step
  "min_lambda" : 9.99999994e-09, 

  // min value of the chi ratio to increase the radius of the trust region
  "min_ratio_up" : 0.75
 }

"Solver" { 
  "#id" : 8, 
  "name" : "solver_stars", 

  // pointer to the optimization algorithm (GN/LM or others)
  "algorithm" : { 
    "#pointer" : 2
   }, 

  // pointer to linear solver used to compute Hx=b
  "linear_solver" : { 
    "#pointer" : 9
   }, 
  "max_iterations" : [ 100 ], 

  // Minimum mean square error variation to perform global optimization
  "mse_threshold" : -1, 
  "robustifier_policies" : [ { 
  "#pointer" : 10
 } ], 

  // term criteria ptr, if 0 solver will do max iterations
  "termination_criteria" : { 
    "#pointer" : 4
   }, 

  // turn it off to make the world a better place
  "verbose" : 0
 }

"RobustifierPolicyByType" { 
  "#id" : 10, 

  // name of the class of the matching factor
  "factor_class_name" : "SE3PosePointOmniBAErrorFactor", 

  // robustifier matching the rule
  "robustifier" : { 
    "#pointer" : 5
   }
 }

"StarSolver" { 
  "#id" : 11, 
  "name" : "star_solver", 

  // visit to use for determining the reachable variables
  "bf_visit_star" : { 
    "#pointer" : -1
   }, 

  // if toggled attempts the merge
  "do_merge" : 1, 

  // if toggled does an optimization down
  "do_optdown" : 1, 

  // if toggled does an incremental optimization
  "do_optinc" : 1, 

  // class name of the variable that can become a gauge
  "gauge_type" : "VariableSE3QuaternionRightAD", 

  // max eval if h, if below undetermined
  "lambda_max" : 0, 

  // min eval of h matrix, if below undedermined
  "lambda_min" : 0, 

  // ratio between min and max eval. If below, var is doomed undetermined
  "lambda_ratio" : 9.99999975e-06, 

  // level of action (lower one)
  "level" : 0, 

  // distance between gauges to attempt merge
  "merge_distance" : 3, 

  // minimum number of variables shared between 2 stars to attempt merge
  "merge_min_shared_vars" : 3, 

  // diameter that if exceeded determines the creation of a new star
  "min_cost" : 3, 

  // solver to compute the structure of the graph (lumped constraints)
  "solver_backbone" : { 
    "#pointer" : 12
   }, 

  // solver to run the final optimization
  "solver_finalize" : { 
    "#pointer" : 13
   }, 

  // solver to refine the skeleton variables (frontal nodes)
  "solver_skeleton" : { 
    "#pointer" : 14
   }, 

  // solver to compute the initial solution, after init
  "solver_stars" : { 
    "#pointer" : 8
   }
 }

"Solver" { 
  "#id" : 13, 
  "name" : "solver_finalize", 

  // pointer to the optimization algorithm (GN/LM or others)
  "algorithm" : { 
    "#pointer" : 7
   }, 

  // pointer to linear solver used to compute Hx=b
  "linear_solver" : { 
    "#pointer" : 6
   }, 
  "max_iterations" : [ 100 ], 

  // Minimum mean square error variation to perform global optimization
  "mse_threshold" : -1, 
  "robustifier_policies" : [ { 
  "#pointer" : 10
 } ], 

  // term criteria ptr, if 0 solver will do max iterations
  "termination_criteria" : { 
    "#pointer" : -1
   }, 

  // turn it off to make the world a better place
  "verbose" : 0
 }

"Solver" { 
  "#id" : 14, 
  "name" : "solver_skeleton", 

  // pointer to the optimization algorithm (GN/LM or others)
  "algorithm" : { 
    "#pointer" : 2
   }, 

  // pointer to linear solver used to compute Hx=b
  "linear_solver" : { 
    "#pointer" : 9
   }, 
  "max_iterations" : [ 0, 100 ], 

  // Minimum mean square error variation to perform global optimization
  "mse_threshold" : -1, 
  "robustifier_policies" : [  ], 

  // term criteria ptr, if 0 solver will do max iterations
  "termination_criteria" : { 
    "#pointer" : 4
   }, 

  // turn it off to make the world a better place
  "verbose" : 0
 }

"Solver" { 
  "#id" : 12, 
  "name" : "solver_backbone", 

  // pointer to the optimization algorithm (GN/LM or others)
  "algorithm" : { 
    "#pointer" : 7
   }, 

  // pointer to linear solver used to compute Hx=b
  "linear_solver" : { 
    "#pointer" : 1
   }, 
  "max_iterations" : [ 0, 0, 100 ], 

  // Minimum mean square error variation to perform global optimization
  "mse_threshold" : -1, 
  "robustifier_policies" : [  ], 

  // term criteria ptr, if 0 solver will do max iterations
  "termination_criteria" : { 
    "#pointer" : 3
   }, 

  // turn it off to make the world a better place
  "verbose" : 0
 }

"SparseBlockLinearSolverCholeskyCSparse" { 
  "#id" : 9
 }

